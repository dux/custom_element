// Generated by CoffeeScript 2.4.1
// create DOM custom element or polyfil for older browsers
var CustomElement;

CustomElement = {
  data: {},
  dom_loaded: false,
  attributes: function(node) {
    return Array.prototype.slice.call(node.attributes).reduce(function(h, el) {
      h[el.name] = el.value;
      return h;
    }, {});
  },
  // define custom element
  define: function(name, func) {
    if (window.customElements) {
      return customElements.define(name, class extends HTMLElement {
        connectedCallback() {
          if (CustomElement.dom_loaded) {
            return func(this, CustomElement.attributes(this));
          } else {
            // we need to delay bind if DOM is not loaded
            return window.requestAnimationFrame(() => {
              return func(this, CustomElement.attributes(this));
            });
          }
        }

      });
    } else {
      return this.data[name] = func;
    }
  }
};

// pollyfill for old browsers
if (!window.customElements) {
  setInterval(() => {
    var func, name, node, ref, results;
    ref = CustomElement.data;
    results = [];
    for (name in ref) {
      func = ref[name];
      results.push((function() {
        var i, len, ref1, results1;
        ref1 = Array.from(document.querySelectorAll(`${name}:not(.mounted)`));
        results1 = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          node = ref1[i];
          node.classList.add('mounted');
          results1.push(func(node, CustomElement.attributes(node)));
        }
        return results1;
      })());
    }
    return results;
  }, 100);
}

// when document is loaded we can render nodes without animation frame
document.addEventListener("DOMContentLoaded", function() {
  return CustomElement.dom_loaded = true;
});

// # bind react elements
// bind_react: (name, klass) ->
//   @define name, (node, opts) ->
//     element = React.createElement klass, opts, node.innerHTML
//     ReactDOM.render element, node
export default CustomElement;
